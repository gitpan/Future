#  You may distribute under the terms of either the GNU General Public License
#  or the Artistic License (the same terms as Perl itself)
#
#  (C) Paul Evans, 2013 -- leonerd@leonerd.org.uk

=head1 NAME

C<Future::Phrasebook> - coding examples for C<Future> and C<Future::Utils>

This documentation-only module provides a phrasebook-like approach to giving
examples on how to use L<Future> and L<Future::Utils> to structure
Future-driven asynchronous or concurrent logic. As with any inter-dialect
phrasebook it is structured into pairs of examples; each given first in a
traditional call/return Perl style, and second in a style using Futures. In
each case, the generic function or functions in the example are named in
C<ALL_CAPITALS()> to make them stand out.

In the examples showing use of Futures, any function that is expected to
return a C<Future> instance is named with a leading C<F_> prefix. Each example
is also constructed so as to yield and overall future in a variable called
C<$f>, which represents the entire operation.

=head1 SEQUENCING

The simplest example of a sequencing operation is simply running one piece of
code, then immediately running a second. In call/return code we can just place
one after the other.

 FIRST();
 SECOND();

Using a Future it is necessary to await the result of the first C<Future>
before calling the second.

 my $f = F_FIRST()
    ->and_then( sub { F_SECOND(); } );

Here, the anonymous closure is invoked once the C<Future> returned by
C<F_FIRST()> succeeds. Because C<and_then> invokes the code block only if the
first Future succeeds, it shortcircuits around failures similar to the way that
C<die()> shortcircuits around thrown exceptions. A C<Future> representing the
entire combination is returned by the method.

Because the C<and_then> method itself returns a C<Future> representing the
overall operation, it can itself be further chained.

 FIRST();
 SECOND();
 THIRD();

Z<>

 my $f = F_FIRST()
    ->and_then( sub { F_SECOND(); } )
    ->and_then( sub { F_THIRD(); } );

See below for examples of ways to handle exceptions.

=head2 Passing Results

Often the result of one function can be passed as an argument to another
function.

 OUTER( INNER() );

To obtain the result of the first C<Future> use the C<get> method on it. It is
conveniently passed as the only argument into the C<and_then>.

 my $f = F_INNER()
    ->and_then( sub {
       my $f_inner = shift;
       F_OUTER( $f_inner->get );
    });

=head1 CONDITIONALS

It may be that the result of one function call is used to determine whether or
not another operation is taken.

 if( COND() == $value ) {
    ACTION();
 }

Because the C<and_then> code block is given the first future, and is expected
to return a future, it can decide whether to call the second function to
return a new future, or simply return the one it was given.

 my $f = F_COND()
    ->and_then( sub {
       my $f_cond = shift;
       if( $f_cond->get == $value ) {
          return F_ACTION();
       }
       else {
          return $f_cond;
       }
    });

=head1 EXCEPTION HANDLING

In regular call/return style code, if any function throws an exception, the
remainder of the block is not executed, the containing C<try> or C<eval> is
aborted, and control is passed to the corresponding C<catch> or line after the
C<eval>.

 try {
    FIRST();
 }
 catch {
    my $e = $_;
    ERROR( $e );
 };

The C<or_else> method on a C<Future> can be used here. It behaves similar to
C<and_then>, but is only invoked if the initial C<Future> fails; not if it
succeeds. The C<failure> method on the initial C<Future> passed into the code
block can be used to inspect the exception.

 my $f = F_FIRST()
    ->or_else( sub { F_ERROR( shift->failure ); } );

Often it may be the case that the failure-handling code is in fact immediate,
and doesn't return a C<Future>. In that case, the C<or_else> code block can
return an immediate C<Future> instance.

 my $f = F_FIRST()
    ->or_else( sub {
       ERROR( shift->failure );
       return Future->new->done;
    });

The C<followed_by> method is similar again, though it invokes the code block
regardless of the success or failure of the initial C<Future>. It can be used
to create C<finally> semantics. By returning the C<Future> instance that it
was passed, the C<followed_by> code ensures it doesn't affect the result of
the operation.

 try {
    FIRST();
 }
 catch {
    ERROR( $_ );
 }
 finally {
    CLEANUP();
 };

Z<>

 my $f = F_FIRST()
    ->or_else( sub {
       my $f_fail = shift;
       ERROR( $f_fail->failure );
       return $f_fail;
    })
    ->followed_by( sub {
       CLEANUP();
       return shift;
    });

=head1 ITERATION

To repeat a single block of code multiple times, a C<while> block is often
used.

 while( COND() ) {
    FUNC();
 }

The C<Future::Utils::repeat> function can be used to repeatedly iterate a
given C<Future>-returning block of code until its ending condition is
satisfied.

 use Future::Utils qw( repeat );
 my $f = repeat {
    F_FUNC();
 } while => sub { COND() };

Unlike the statement nature of perl's C<while> block, this C<repeat> C<Future>
can yield a value; the value returned by C<< $f->get >> is the result of the
final trial of the code block.

Here, the condition function it expected to return its result immediately. If
the repeat condition function itself returns a C<Future>, it can be combined
along with the loop body. The trial C<Future> returned by the code block is
passed to the C<while> condition function.

 my $f = repeat {
    F_FUNC()
       ->followed_by( sub { F_COND(); } );
 } while => sub { shift->get };

The condition can be negated by using C<until> instead

 until( HALTING_COND() ) {
    FUNC();
 }

Z<>

 my $f = repeat {
    F_FUNC();
 } until => sub { HALTING_COND() };

=head2 Iterating with Exceptions

Technically, this loop isn't quite the same as the equivalent C<while> loop in
plain Perl, because the C<while> loop will also stop executing if the code
within it throws an exception. This can be handled in C<repeat> by testing for
a failed C<Future> in the C<until> condition.

 while(1) {
    TRIAL();
 }

Z<>

 my $f = repeat {
    F_TRIAL();
 } until => sub { shift->failure };

Another variation is the C<repeat_until_success> function, which provides a
convenient shortcut to calling C<repeat> with a condition that makes another
attempt each time the previous one fails; stopping once it achieves a
successful result.

 while(1) {
    eval { TRIAL(); 1 } and last;
 }

Z<>

 my $f = repeat_until_success {
    F_TRIAL();
 };

=head2 Iterating over a List

A variation on the idea of the C<while> loop is the C<foreach> loop; a loop
that executes once for each item in a given list, with a variable set to one
value from that list each time.

 foreach my $thing ( @THINGS ) {
    INSPECT( $thing );
 }

This can be performed with C<Future> using the C<foreach> parameter to the
C<repeat> function. When this is in effect, the block of code is passed each
item of the given list as the first parameter.

 my $f = repeat {
    my $thing = shift;
    F_INSPECT( $thing );
 } foreach => \@THINGS;

=head1 CONCURRENCY

This final section of the phrasebook demonstrates a number of abilities that
are simple to do with C<Future> but can't easily be done with regular
call/return style programming, because they all involve an element of
concurrency. In these examples the comparison with regular call/return code
will be somewhat less accurate because of the inherent ability for the
C<Future>-using version to behave concurrently.

=head2 Waiting on Multiple Functions

The C<< Future->wait_all >> constructor creates a C<Future> that waits for all
of the component futures to complete. This can be used to form a sequence with
concurrency.

 { FIRST_A(); FIRST_B() }
 SECOND();

Z<>

 my $f = Future->wait_all( FIRST_A(), FIRST_B() )
    ->and_then( sub { SECOND() } );

Unlike in the call/return case, this can perform the work of C<FIRST_A()> and
C<FIRST_B()> concurrently, only proceeding to C<SECOND()> when both are ready.

The result of the C<wait_all> C<Future> is the list of its component
C<Future>s. This can be used to obtain the results.

 SECOND( FIRST_A(), FIRST_B() );

Z<>

 my $f = Future->wait_all( FIRST_A(), FIRST_B() )
    ->and_then( sub {
       my ( $f_a, $f_b ) = shift->get;
       SECOND( $f_a->get, $f_b->get );
    } );

Because the C<get> method will re-raise an exception caused by a failure of
either of the C<FIRST> functions, the second stage will fail if any of the
initial Futures failed.

As this is likely to be the desired behaviour most of the time, this kind of
control flow can be written slightly neater using C<< Future->needs_all >>
instead.

 my $f = Future->needs_all( FIRST_A(), FIRST_B() )
    ->and_then( sub { SECOND( shift->get ) } );

The C<get> method of a C<needs_all> dependent Future returns a concatenated
list of the results of all its component Futures, as the only way it will
succeed is if all the components do.

=head2 Waiting on Multiple Calls of One Function

Because the C<wait_all> and C<needs_all> constructors take an entire list of
C<Future> instances, they can be conveniently used with C<map> to wait on the
result of calling a function concurrently once per item in a list.

 my @RESULT = map { FUNC( $_ ) } @ITEMS;
 PROCESS( @RESULT );

Again, the C<needs_all> version allows more convenient access to the list of
results.

 my $f = Future->needs_all( map { F_FUNC( $_ ) } @ITEMS )
    ->and_then( sub {
       my @RESULT = shift->get;
       F_PROCESS( @result )
    } );

=head1 AUTHOR

Paul Evans <leonerd@leonerd.org.uk>

=cut
